def heapify(nums, n, i):
    great=i
    l= 2*i+1
    r= 2*i+2
    if l<n and nums[i]<nums[l]:
        great= l
    if r<n and nums[great]<nums[r]:
        great= r
        
    if great!= i:
        (nums[i], nums[great])= (nums[great],nums[i])
        heapify(nums, n, great)

def heapsort(nums):
    n= len(nums)
    for i in range (n//2-1, -1, -1):
        heapify(nums,n, i)
    for i in range(n-1, 0, -1):
        (nums[i], nums[0])= (nums[0], nums[i])
        heapify(nums, i, 0)

        


class KthLargest(object):

    def __init__(self, k, nums):
        self.nums= nums
        self.k=k
        n= len(nums)
        heapsort(nums)
        while len(nums)>k:
            nums.pop(0)
        

    def add(self, val):
        self.nums.append(val)
        heapsort(self.nums)
        if len(self.nums)>self.k:
            self.nums.pop(0)
        return self.nums[0]
        


# Your KthLargest object will be instantiated and called as such:
# obj = KthLargest(k, nums)
# param_1 = obj.add(val)
